
=head1 NAME

Venus::Json - Json Class

=cut

=head1 ABSTRACT

Json Class for Perl 5

=cut

=head1 SYNOPSIS

  package main;

  use Venus::Json;

  my $json = Venus::Json->new(
    value => { name => ['Ready', 'Robot'], version => 0.12, stable => \1, }
  );

  # $json->encode;

=cut

=head1 DESCRIPTION

This package provides methods for reading and writing L<JSON|https://json.org>
data.

=cut

=head1 ATTRIBUTES

This package has the following attributes:

=cut

=head2 engine

  engine(Object)

This attribute is read-write, accepts C<(Object)> values, and is optional.

=cut

=head1 INHERITS

This package inherits behaviors from:

L<Venus::Kind::Utility>

=cut

=head1 INTEGRATES

This package integrates behaviors from:

L<Venus::Role::Accessible>
L<Venus::Role::Explainable>

=cut

=head1 METHODS

This package provides the following methods:

=cut

=head2 config

  config() (Object)

The config method returns the L<JSON::PP> compatible JSON client.

I<Since C<0.01>>

=over 4

=item config example 1

  # given: synopsis;

  my $config = $json->config;

  # bless({ ...  }, "...") # e.g. JSON::PP

  # $json->config->canonical->pretty;

=back

=cut

=head2 decode

  decode(Str $json) (Any)

The decode method decodes the JSON string, sets the object value, and returns
the decoded value.

I<Since C<0.01>>

=over 4

=item decode example 1

  # given: synopsis;

  my $decode = $json->decode('{"codename":["Ready","Robot"],"stable":true}');

  # { codename => ["Ready", "Robot"], stable => 1 }

=back

=cut

=head2 encode

  encode() (Str)

The encode method encodes the objects value as a JSON string and returns the
encoded string.

I<Since C<0.01>>

=over 4

=item encode example 1

  # given: synopsis;

  my $encode = $json->encode;

  # '{ "name": ["Ready", "Robot"], "stable": true, "version": 0.12 }'

=back

=cut

=head2 explain

  explain() (Str)

The explain method returns the encoded JSON string and is used in
stringification operations.

I<Since C<0.01>>

=over 4

=item explain example 1

  # given: synopsis;

  my $explain = $json->explain;

  # '{ "name": ["Ready", "Robot"], "stable": true, "version": 0.12 }'

=back

=cut

=head2 package

  package() (Str)

The package method returns the package name of the first JSON client found.
Those clients (in this order) are L<JSON::XS>, and L<JSON::PP>. This package
does not support L<Cpanel::JSON::XS> because it does not support custom boolean
handlers.

I<Since C<0.01>>

=over 4

=item package example 1

  # given: synopsis;

  my $package = $json->package;

  # "JSON::PP"

=back

=cut

=head1 AUTHORS

Cpanery, C<cpanery@cpan.org>

=cut

=head1 LICENSE

Copyright (C) 2021, Cpanery

Read the L<"license"|https://github.com/cpanery/venus/blob/master/LICENSE> file.

=cut