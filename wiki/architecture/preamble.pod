
=head1 NAME

Venus - Preamble

=cut

=head1 ABSTRACT

OO Standard Library for Perl 5

=cut

=head1 SYNOPSIS

  use Venus::Date;

  # return iso8601 string, 2 days from the start of the month
  my $date = Venus::Date->new->restart_month->add_days(2)->iso8601;

=cut

=head1 DESCRIPTION

Unlike Ruby, Python, and other languages, in Perl everything is B<not> an object.
In-fact, in Perl, most things aren't objects. Couple this with the fact that
Perl has a small function-based standard library and you have a recipe for
re-inventing the wheel.

The Venus project was designed to provide a pure Perl non-core object-oriented
standard library for Perl 5. At a high-level the idea is to provide an
architecture and implementation that leverages the Perl core functionality and
makes it more consistent, easily accessible, and intuitive.

The synopsis serves as an example of how Venus leverages pre-existing
functionality in the Perl core to provide an intuitive API for performing (in
this case) moderately complex date/time operations.

=cut

=head1 FEATURES

The following are some of the features of L<Venus>:

=cut

=over 4

=item frictionless

This library has zero dependencies and supports Perl 5.18.0+ in an effort to be
frictionless, i.e. to help ease the decision (legal, technical, etc) of whether or
not to install and/or adopt.

B<example 1>

  package main;

  use Venus;

  true ne false;

  # 1

=back

=over 4

=item performant

This library tries to be as performant as possible, with very fast
object-orientation, and at-present is faster than L<Moose>, L<Mouse>, L<Moo>,
and others (less L<Mo>) based on cold-start benchmarks of equivalent feature
testing.

B<example 1>

  package User;

  use Venus::Class 'attr';

  attr 'name';

  package main;

  my $user = User->new(
    name => 'Elliot',
  );

  # bless({name => "Elliot"}, "User")

=back

=over 4

=item consistent

This library tries to maximize consistency in class structure, roles
integrations, subroutine naming, and documentation.

B<example 1>

  package main;

  use Venus::Array;

  my $array = Venus::Array->new([1..4]);

  # $array->all(sub{ $_ > 0 });
  # $array->any(sub{ $_ > 0 });
  # $array->each(sub{ $_ > 0 });
  # $array->grep(sub{ $_ > 0 });
  # $array->map(sub{ $_ > 0 });
  # $array->none(sub{ $_ < 0 });
  # $array->one(sub{ $_ == 0 });
  # $array->random;

  use Venus::Hash;

  my $hash = Venus::Hash->new({1..8});

  # $hash->all(sub{ $_ > 0 });
  # $hash->any(sub{ $_ > 0 });
  # $hash->each(sub{ $_ > 0 });
  # $hash->grep(sub{ $_ > 0 });
  # $hash->map(sub{ $_ > 0 });
  # $hash->none(sub{ $_ < 0 });
  # $hash->one(sub{ $_ == 0 });
  # $hash->random;

  $array->count == $hash->count;

  # 1

=back

=over 4

=item compensating

This library tries to compensate for missing features found in most all other
programming languages. This includes fully backwards-compatible C<true> and
C<false> keyword functions, as well as C<raise> for throwing exceptions, and
more.

B<example 1>

  package main;

  use Venus 'raise';

  if (true) {
    raise 'App::Error', {
      message => 'Something unexpected happened',
    };
  }

  # Exception! (isa App::Error)

=back

=over 4

=item autoboxing

This library provides opt-in pure Perl autoboxing allowing you to chain methods
calls across objects and values.

B<example 1>

  package main;

  use Venus::String;

  my $string = Venus::String->new('hello, world');

  $string->box('split', qr/,\s*/)->join(' ')->trim->strip->titlecase->unbox('get');

  # Hello World

=back

=over 4

=item utilities

This library provides serveral essential utility classes for performing common
programming tasks.

B<example 1>

  package main;

  use Venus::Yaml;

  my $yaml = Venus::Yaml->new(
    value => {name => ['Ready', 'Robot'], version => 0.12, stable => !!1},
  );

  my $encode = $yaml->encode;

  # "---\nname:\n- Ready\n- Robot\nstable: true\nversion: 0.12\n"

=back

=over 4

=item reflection

This library provides a package reflection class, L<Venus::Space>, which can be
used to perform meta-programming in package namespaces.

B<example 1>

  package main;

  use Venus::Space;

  my $space = Venus::Space->new('Venus');

  $space->do('tryload')->variables;

  # [
  #   [
  #     'arrays',
  #     []
  #   ],
  #   [
  #     'hashes',
  #     []
  #   ],
  #   [
  #     'scalars',
  #     [
  #       'AUTHORITY',
  #       'VERSION'
  #     ]
  #   ]
  # ]

=back

=over 4

=item exceptions

This library provides a robust framework for raising, i.e. generating and
throwing, exception objects and catching them. There's also support for ad-hoc
granularity without having to create concrete classes.

B<example 1>

  package main;

  use Venus::Error;

  my $error = Venus::Error->as('on.adhoc.random');

  # bless(..., "Venus::Error");

B<example 2>

  package main;

  use Venus::Error;

  my $error = Venus::Error->as('on.adhoc.random');

  $error->is('on.adhoc.random');

  # true

B<example 3>

  package main;

  use Venus::Error;

  my $error = Venus::Error->as('on.adhoc.random');

  $error->of('on.adhoc');

  # true

B<example 4>

  package main;

  use Venus::Throw;

  my $throw = Venus::Throw->new('App::Error');

  $throw->error;

  # Exception! (isa App::Error)

=back

=over 4

=item composable

This library provides a library of composable roles which can be used to extend
core behaviors to custom objects.

B<example 1>

  package MyApp;

  use Venus::Class 'with';

  with 'Venus::Role::Dumpable';
  with 'Venus::Role::Stashable';

  package main;

  my $myapp = MyApp->new;

  $myapp->stash(greeting => 'hello world');

  $myapp->dump('stash');

  # '{"greeting" => "hello world"}'

=back

=over 4

=item pluggable

This library provides a mechanism for extending the standard library, i.e.
value classes, using plugins which can be automatically discovered and invoked.
(no monkey-patching necessary)

B<example 1>

  package Venus::String::Plugin::Base64;

  sub new {
    return bless {};
  }

  sub execute {
    my ($self, $string, @args) = @_;

    require MIME::Base64;

    return MIME::Base64::encode_base64($string->value);
  }

  package main;

  use Venus::String;

  my $string = Venus::String->new('hello, world');

  $string->base64;

  # "aGVsbG8sIHdvcmxk\n"

=back

=head1 AUTHORS

Awncorp, C<awncorp@cpan.org>

=cut
